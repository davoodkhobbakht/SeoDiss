import json
import time
import requests
from g4f.client import Client
import os.path
from g4f.cookies import set_cookies_dir, read_cookie_files
from g4f.Provider import RetryProvider,Allyfy,Liaobots,DDG,ChatGptEs,Pizzagpt
import g4f.debug
g4f.debug.logging = True
import csv


# WooCommerce API credentials
wc_api_url = 'https://v2ray24.store/wp-json/wc/v3/products'
consumer_key = 'ck_326169970f1de0972a0c277f86e7403a37f81bdf'
consumer_secret = 'cs_4728a3abfb658dd6fa934beeb0ed10c6ff81b86a'

# WooCommerce authentication parameters
wc_auth_params = {
    'consumer_key': consumer_key,
    'consumer_secret': consumer_secret
}

client = Client(
    provider=RetryProvider([Liaobots,DDG,ChatGptEs,Pizzagpt]),
    #proxies="http://127.0.0.1:10809",
)


# Function to generate text using GPT-4Free (g4f)
def generate_text_with_g4f(prompt, max_tokens=1500):

   
    response = client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}],
        
    )
    
    return response.choices[0].message.content

# Function to retrieve all products from WooCommerce
def get_all_products():
    page = 1
    products = []
    while True:
        response = requests.get(f"{wc_api_url}", params={**wc_auth_params, 'page': page, 'per_page': 100})
        if response.status_code == 200:
            current_products = response.json()
            if not current_products:
                break
            products.extend(current_products)
            page += 1
        else:
            print(f"Failed to retrieve products: {response.text}")
            break
    return products

# Function to generate or update article for a WooCommerce product
def generate_article_for_product(product, update=False):
    product_id = product['id']
    product_name = product['name']
    existing_description = product.get('description', '').strip()

    if existing_description and update:
        # Append new content, asking explicitly for a continuation of the existing description
        prompt = (
    f"توضیحات محصول '{product_name}' را به زبان فارسی گسترش و به‌روزرسانی کنید و اطلاعات دقیق‌تری درباره ویژگی‌ها، مزایا و مشخصات فنی آن اضافه کنید. تمرکز بر نقاط قوت منحصر به فرد محصول داشته باشید. ویژگی‌های کلیدی را به صورت فهرست‌وار با استفاده از فرمت HTML (<ul><li>) ارائه دهید. متن باید به طور طبیعی از توضیحات موجود زیر استفاده کند و از تگ‌های <li> استفاده کند. از درج هر گونه متن غیرضروری یا نامرتبط خودداری کنید و به طور کامل بهینه‌سازی شده برای SEO و بازاریابی باشد."
)



    else:
        # Generate a completely new description along with an SEO-optimized title
       prompt = (f"یک توضیحات ۳۰۰ کلمه‌ای بهینه‌سازی شده برای SEO به زبان فارسی برای '{product_name}' بنویسید که بر روی کاربردها، مصارف و هدف مخاطبان آن تمرکز کند. توضیحات باید محصول را به طور طبیعی و قابل خواندن برای مشتریان بالقوه معرفی کند. از ساختار HTML مناسب با عناوین (H2 و H3) استفاده کنید و یک پاراگراف کوتاه در انتها با یک دعوت به عمل برای خرید محصول قرار دهید. مطمئن شوید که کد HTML تمیز و بهینه‌سازی شده برای SEO است. از درج هر گونه متن غیرضروری یا نامرتبط خودداری کنید.")



    # Get additional text or a new description from GPT-4Free
    article_content = generate_text_with_g4f(prompt, max_tokens=600).replace("```html" , "")
    article_content = article_content.replace("```" ,"")
    print('\n\n\n')
    print(article_content)
    print('\n\n\n')
    # Combine the old description and the new content, if necessary
    new_description = existing_description + " " + article_content if update and existing_description else article_content
    
    # Update the product description via the WooCommerce API
    update_data = {"description": new_description}
    update_response = requests.put(f"{wc_api_url}/{product_id}", json=update_data, params=wc_auth_params)
    
    if update_response.status_code == 200:
        print(f"Product '{product_name}' updated successfully.")
    else:
        print(f"Failed to update product '{product_name}': {update_response.text}")


# Function to generate a user question for a product
def generate_question_for_product(product_name):
    prompt = (
        f"Imagine you are a potential customer interested in '{product_name}'. "
        f"Ask a question about its features or uses or any specific details you want to know before buying. "
        f"The question should be natural, informative, and encourage the admin to give helpful advice.Write it in persian.Do not include any unnecessary or unrelated text."
    )

    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
    )
    
    question = response.choices[0].message.content
    return question

# Function to generate an admin reply to a user question
def generate_reply_for_question(question, product_name):
    prompt = (
        f"You're an admin for a product called '{product_name}'. Respond to the following user question in a helpful and "
        f"marketing-focused manner. Address the user's concerns, provide additional benefits and features of the product, "
        f"and encourage the user to make a purchase.Write it in persian.Do not include any unnecessary or unrelated text. The question is: '{question}'"
    )

    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
    )
    
    reply = response.choices[0].message.content
    return reply

# Function to post both the user question and admin reply as comments
def post_comment_and_reply(product_id, question, reply):
    # Posting the user question
    question_data = {
        "post": product_id,
        "author_name": "User",
        "author_email": "user@example.com",
        "content": question,
        "status": "publish"  # Automatically approve the comment
    }

    question_response = requests.post(wc_api_url, json=question_data, params=wc_auth_params)

    if question_response.status_code == 201:
        question_id = question_response.json().get('id')

        # Posting the admin reply
        reply_data = {
            "post": product_id,
            "author_name": "Admin",
            "author_email": "admin@example.com",
            "content": reply,
            "status": "publish",  # Automatically approve the reply
            "parent": question_id  # Link the reply to the original question
        }

        reply_response = requests.post(wc_api_url, json=reply_data, params=wc_auth_params)

        if reply_response.status_code == 201:
            print(f"Comment and reply posted successfully for product ID {product_id}")
        else:
            print(f"Failed to post admin reply: {reply_response.text}")
    else:
        print(f"Failed to post user question: {question_response.text}")

# Example usage
def generate_and_post_comments_for_product(product_id, product_name):
    question = generate_question_for_product(product_name)
    print(question)
    reply = generate_reply_for_question(question, product_name)
    print(reply)
    post_comment_and_reply(product_id, question, reply)


# Main function to handle product updates and review generation
def main():
    # Step 1: Retrieve all products
    #products = get_all_products()

    #discription to woocommerce
    '''
    for product in products :
        product_name = product['name']
        product_id = product['id']
        print(product_id,product_name)
        generate_and_post_comments_for_product(product_id, product_name)
    '''
    #discription to woocommerce
    ''' # Step 2: Process each product
    for product in products:
        product_name = product['name']
        existing_description = product.get('description', '').strip()

        if existing_description:
            # Step 3: Append additional text if description exists
            print(f"Appending to description for product '{product_name}'...")
            generate_article_for_product(product, update=True)
        else:
            # Step 3: Add a new description if none exists
            print(f"Adding new description for product '{product_name}'...")
            generate_article_for_product(product, update=False)'''
    


    input_file_path = 'products.csv'
    output_file_path = 'updated_file.csv'

    # Read the existing CSV data
    with open(input_file_path, mode='r', newline='', encoding='utf-8') as csvfile:
        reader = csv.DictReader(csvfile)
        
        # Create a list to hold the updated rows
        updated_rows = []
        
        # Iterate over each row in the CSV
        for row in reader:
            # Add the new description column
            
            print('\n\n\n\n\n -----------------------------------------------------------------')
            print(f'product id {row['ID']} is processing\n\n\n\n')
            prompt = (f"برای محصول {row['post_title']} یک عنوان کوتاه و پربازده برای SEO در داخل پرانتز بنویس. سپس یک توضیحات بین 300 تا 500 کلمه با رعایت اصول SEO از نظر پلاگین Yoast بنویس. توضیحات باید شامل تگ‌های HTML مناسب مثل <h1>، <h2>، <strong> و <p> باشد. هیچ کاراکتر اضافی یا توضیحات خارج از این موارد در خروجی ننویس.")
            article_content = generate_text_with_g4f(prompt, max_tokens=1500)
           
            print('\n\n\n\n\n -----------------------------------------------------------------')
            print(article_content)
            print('\n\n\n\n\n -----------------------------------------------------------------')
            time.sleep(2)
            row['description'] = article_content
            updated_rows.append(row)

    # Write the updated data to a new CSV file
    with open(output_file_path, mode='w', newline='', encoding='utf-8') as csvfile:
        fieldnames = reader.fieldnames + ['description']  # Add new column to fieldnames
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        
        # Write the header
        writer.writeheader()
        
        # Write the updated rows
        writer.writerows(updated_rows)

    print(f'Updated CSV file saved as {output_file_path}')

if __name__ == "__main__":
    main()
